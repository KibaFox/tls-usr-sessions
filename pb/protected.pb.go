// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protected.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Bulletin struct {
	Bulletin             string   `protobuf:"bytes,1,opt,name=bulletin,proto3" json:"bulletin,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bulletin) Reset()         { *m = Bulletin{} }
func (m *Bulletin) String() string { return proto.CompactTextString(m) }
func (*Bulletin) ProtoMessage()    {}
func (*Bulletin) Descriptor() ([]byte, []int) {
	return fileDescriptor_5b99d8d2ac383f6c, []int{0}
}

func (m *Bulletin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bulletin.Unmarshal(m, b)
}
func (m *Bulletin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bulletin.Marshal(b, m, deterministic)
}
func (m *Bulletin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bulletin.Merge(m, src)
}
func (m *Bulletin) XXX_Size() int {
	return xxx_messageInfo_Bulletin.Size(m)
}
func (m *Bulletin) XXX_DiscardUnknown() {
	xxx_messageInfo_Bulletin.DiscardUnknown(m)
}

var xxx_messageInfo_Bulletin proto.InternalMessageInfo

func (m *Bulletin) GetBulletin() string {
	if m != nil {
		return m.Bulletin
	}
	return ""
}

func init() {
	proto.RegisterType((*Bulletin)(nil), "pb.Bulletin")
}

func init() { proto.RegisterFile("protected.proto", fileDescriptor_5b99d8d2ac383f6c) }

var fileDescriptor_5b99d8d2ac383f6c = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x28, 0xca, 0x2f,
	0x49, 0x4d, 0x2e, 0x49, 0x4d, 0xd1, 0x03, 0xb1, 0xf2, 0x85, 0x98, 0x0a, 0x92, 0xa4, 0xa4, 0xd3,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x22, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25,
	0x95, 0x10, 0x05, 0x4a, 0x6a, 0x5c, 0x1c, 0x4e, 0xa5, 0x39, 0x39, 0xa9, 0x25, 0x99, 0x79, 0x42,
	0x52, 0x5c, 0x1c, 0x49, 0x50, 0xb6, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x6f, 0x64,
	0xcd, 0xc5, 0x19, 0x00, 0x33, 0x5b, 0x48, 0x8f, 0x8b, 0xc5, 0xd7, 0x3f, 0xc4, 0x45, 0x48, 0x4c,
	0x0f, 0x62, 0xb4, 0x1e, 0xcc, 0x68, 0x3d, 0x57, 0x90, 0xd1, 0x52, 0x3c, 0x7a, 0x05, 0x49, 0x7a,
	0x30, 0x63, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0xf2, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc4,
	0x5d, 0xaf, 0xed, 0x9f, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProtectedClient is the client API for Protected service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProtectedClient interface {
	MOTD(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Bulletin, error)
}

type protectedClient struct {
	cc *grpc.ClientConn
}

func NewProtectedClient(cc *grpc.ClientConn) ProtectedClient {
	return &protectedClient{cc}
}

func (c *protectedClient) MOTD(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Bulletin, error) {
	out := new(Bulletin)
	err := c.cc.Invoke(ctx, "/pb.Protected/MOTD", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProtectedServer is the server API for Protected service.
type ProtectedServer interface {
	MOTD(context.Context, *empty.Empty) (*Bulletin, error)
}

// UnimplementedProtectedServer can be embedded to have forward compatible implementations.
type UnimplementedProtectedServer struct {
}

func (*UnimplementedProtectedServer) MOTD(ctx context.Context, req *empty.Empty) (*Bulletin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MOTD not implemented")
}

func RegisterProtectedServer(s *grpc.Server, srv ProtectedServer) {
	s.RegisterService(&_Protected_serviceDesc, srv)
}

func _Protected_MOTD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProtectedServer).MOTD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Protected/MOTD",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProtectedServer).MOTD(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Protected_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Protected",
	HandlerType: (*ProtectedServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MOTD",
			Handler:    _Protected_MOTD_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protected.proto",
}
